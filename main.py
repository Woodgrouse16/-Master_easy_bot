import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
MASTERS_CHAT_ID = int(os.getenv("MASTERS_CHAT_ID"))

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    service = State()
    date = State()
    time = State()
    name_phone = State()

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands='start')
async def start(message: types.Message):
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –º–∞—Å—Ç–µ—Ä–∞. –ü–æ–º–æ–≥—É –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è ‚ú®\n"
        "–°–µ–π—á–∞—Å —É—Ç–æ—á–Ω—é –ø–∞—Ä—É –º–æ–º–µ–Ω—Ç–æ–≤ ‚Äî –∏ –º—ã –≤—Å—ë –æ—Ñ–æ—Ä–º–∏–º!"
    )

    # –ö–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º —É—Å–ª—É–≥
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–ú–∞—Å—Å–∞–∂ —Å–ø–∏–Ω—ã"))
    keyboard.add(KeyboardButton("–ú–∞—Å—Å–∞–∂ –ª–∏—Ü–∞"))
    keyboard.add(KeyboardButton("–û–±—â–∏–π –º–∞—Å—Å–∞–∂"))
    keyboard.add(KeyboardButton("–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"))

    await message.answer("–ö–∞–∫—É—é —É—Å–ª—É–≥—É –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å?", reply_markup=keyboard)
    await Form.service.set()

# –£—Å–ª—É–≥–∞
@dp.message_handler(state=Form.service)
async def get_service(message: types.Message, state: FSMContext):
    await state.update_data(service=message.text)

    await message.answer(
        "–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?\n"
        '–ú–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1 –∞–≤–≥—É—Å—Ç–∞") –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ ("–≤ –ø—è—Ç–Ω–∏—Ü—É").',
        reply_markup=ReplyKeyboardRemove()
    )
    await Form.date.set()

# –î–∞—Ç–∞
@dp.message_handler(state=Form.date)
async def get_date(message: types.Message, state: FSMContext):
    await state.update_data(date=message.text)

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–£—Ç—Ä–æ (–¥–æ 12:00)"))
    keyboard.add(KeyboardButton("–î–µ–Ω—å (12:00‚Äì17:00)"))
    keyboard.add(KeyboardButton("–í–µ—á–µ—Ä (–ø–æ—Å–ª–µ 17:00)"))

    await message.answer("–ê –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –¥–Ω—è –≤–∞–º —É–¥–æ–±–Ω–µ–µ?", reply_markup=keyboard)
    await Form.time.set()

# –í—Ä–µ–º—è
@dp.message_handler(state=Form.time)
async def get_time(message: types.Message, state: FSMContext):
    await state.update_data(time=message.text)

    await message.answer("–ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?\n–ò, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏.")
    await Form.name_phone.set()

# –ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω
@dp.message_handler(state=Form.name_phone)
async def get_name_phone(message: types.Message, state: FSMContext):
    await state.update_data(name_phone=message.text)

    data = await state.get_data()
    text = (
        "üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
        f"üõé –£—Å–ª—É–≥–∞: {data['service']}\n"
        f"üìÖ –î–∞—Ç–∞: {data['date']}\n"
        f"‚è∞ –í—Ä–µ–º—è: {data['time']}\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {data['name_phone']}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Å—Ç–µ—Ä—É
    await bot.send_message(MASTERS_CHAT_ID, text)

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –Ø –ø–µ—Ä–µ–¥–∞–º –¥–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä—É ‚Äî –∏ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üåø",
        reply_markup=ReplyKeyboardRemove()
    )

    await state.finish()

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
